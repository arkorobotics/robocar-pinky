1. Install nano: sudo apt install nano

2. Setup git using github account

3. Checkout robocar-pinky repo
	$ git clone git@github.com:arkorobotics/robocar-pinky.git

4. Setup fan to autorun on boot: 
	$ sudo nano /etc/rc.local
	$ sudo chmod +x /etc/rc.local
	Add:
		sh -c 'echo 64 > /sys/devices/pwm-fan/target_pwm'

5. Add/Install ROS (Melodic): http://wiki.ros.org/melodic/Installation/Ubuntu

6. Install Stereo Camera Board Libraries:
	$ sudo apt install libv4l-dev libudev-dev ros-melodic-rtabmap*
	$ sudo apt install ros-melodic-image-geometry ros-melodic-cv-camera
	$ sudo apt-get install libcanberra-gtk-module
	$ cd /usr/include
	$ sudo ln -s opencv4 opencv

7. Configure Virtual COM Port for IMU:
	$ sudo touch /etc/udev/rules.d/99-ttyacms.rules
	$ sudo nano /etc/udev/rules.d/99-ttyacms.rules
	Add:
		ATTRS{idVendor}=="04b4" ATTRS{idProduct}=="00f9", MODE="0666",
		ENV{ID_MM_DEVICE_IGNORE}="1"
		ATTRS{idVendor}=="04b4" ATTRS{idProduct}=="00f8", MODE="0666",
		ENV{ID_MM_DEVICE_IGNORE}="1"
	$ sudo udevadm control â€“R

8. Remove the pesky chromium desktop icon: 
	$ rm /etc/xdg/autostart/nvchrome.sh

9. Note:
	If you connect both the cameras (mono [mipi] and stereo [usb3]), during boot the 
	operating system will initalize the mono camera first as /dev/video0 and the 
	stereo camera second as /dev/video1.

10. Run a simple stereo camera test:
	$ cd /home/robocar/robocar-pinky/Software/Sensor_Test/oCam/Example/oCamS_Linux_ParameterControl_Example
	$ make
	$ ./oCamS_Linux_ParameterControl_Example

11. Set env to use to python3
	$ nano ~/.bashrc
	Add:
		alias python=python3
	$ ROS_PYTHON_VERSION=3

12. Install pip
	$ sudo apt install python3-pip

13. Install ros/catkin_make tools:
	$ pip3 install -U rosdep rosinstall_generator wstool rosinstall six vcstools

14. Attempting to run SLAM example, but it requires setting up catkin_make
	$ mkdir -p ~/catkin_ws/src
	$ cd ~/catkin
	$ catkin_make
	This fails...

15. Reinstall catkin for some unknown reason:
        $ sudo apt-get install --reinstall ros-melodic-catkin

16. Clean up catkin workspace
	$ rm ~/catkin/src
	$ cd ~/catkin
	$ catkin_make
	It works!

17. Download and test oCamS_ROS_Package
	$ sudo apt-get install libv4l-dev libudev-dev ros-kinetic-rtabmap*
	$ cd YOUR_WORKING_DIRECTORY (ex. $ cd ~/catkin_ws/src/)
	$ svn export https://github.com/withrobot/oCamS/trunk/Software/oCamS_ROS_Package/ocams_1cgn
	$ chmod +x /home/robocar/catkin_ws/src/ocams_1cgn/cfg/cam.cfg
	$ catkin_make
	Fails to build oCamS ROS package because opencv contrib extra packages are not installed

18. Build/Install opencv4 with opencv_contrib
	Follow instructions here: https://docs.opencv.org/master/d7/d9f/tutorial_linux_install.html
		1. Download and build source
			$ cd ~/<my_working_directory>
			$ git clone https://github.com/opencv/opencv.git
			$ git clone https://github.com/opencv/opencv_contrib.git
			$ cd ~/opencv
			$ mkdir build
			$ cd build
			$ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules <opencv_source_directory>
			$ make -j5
			$ sudo make install

19. Download the latest oCamS_ROS_Package from https://github.com/withrobot/oCamS/tree/master/Software/oCamS_ROS_Package
	Copy 'ocams_1cgn' to ~/catkin_ws/src
	$ chmod +x /home/robocar/catkin_ws/src/ocams_1cgn/cfg/cam.cfg
	Add "/usr/local/include/opencv4" to CMakeLists.txt in ocams_1cgn
	Modify the oCamS.cpp to use new cv::ColorConversionCodes in opencv4
	
	Build it:
	$ catkin_make
	
	Run it:
	$ source devel/setup.bash
	$ roslaunch ocams_1cgn ocams_ros.launch
	Runs then crashes

	Making a copy to commit to git in the meantime... need to save the state of things
	Migrated everything from ~/catkin_ws to ~/robocar-pinky/Software/ROS/

20. Discovered that oCamS doesn't support OpenCV 4... need to installed OpenCV3. For now, I will keep both v3/v4 and use them as needed
	
	Install Opencv3 with opencv_contrib
	$ mkdir ~/opencv3
	$ cd ~/opencv3
	$ git clone -b 3.4.9 https://github.com/opencv/opencv
	$ git clone -b 3.4.9 https://github.com/opencv/opencv_contrib
	$ cd ~/opencv3
	$ mkdir build
	$ cd build
	$ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules <opencv_source_directory>
        $ make -j5
	$ sudo make install

	Change CMakeLists.txt to match new include dir: '/usr/local/include/opencv3
	Config file will still be executable.
	Modify the oCamS.cpp back to use the opencv3 conversion codes
	
	Build it:
	$ ~/robocar-pinky/Software/ROS
	$ catkin_make

	It fails again!

	Running the People_Counter example I get a gtk 2 vs 3 conflict error. Perhaps we need to build opencv with more options?

	Try building opencv3 with:
	$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_TBB=ON -DBUILD_NEW_PYTHON_SUPPORT=ON -DWITH_V4L=ON -DINSTALL_C_EXAMPLES=ON -DINSTALL_PYTHON_EXAMPLES=ON -DBUILD_EXAMPLES=ON -DWITH_QT=ON -DWITH_GTK=ON -DWITH_GTK_2_X=ON -DWITH_OPENGL=ON -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ../opencv
	$ ~/opencv3/build
	$ sudo make uninstall
	

21. Try OpenCV 3.2.0 since that's the version ROS Kinetic uses:

	Install Opencv3 with opencv_contrib
        $ mkdir ~/opencv3_2
        $ cd ~/opencv3_2
        $ git clone -b 3.2.0 https://github.com/opencv/opencv
        $ git clone -b 3.2.0 https://github.com/opencv/opencv_contrib
        $ cd ~/opencv3
        $ mkdir build
        $ cd build
        $ cmake -DOPENCV_EXTRA_MODULES_PATH=<opencv_contrib>/modules <opencv_source_directory>
	Fails to build.. turns out you need an older version of cuda (9.0) and it's not easy to install on ubuntu 18.04
	Trying: https://www.videogames.ai/Install-CUDA-9-0-Ubuntu-18-04
	Abandoning this idea because it messes with too many key settings and is unsupported.


22. Reinstalled opencv 3.4.9
	
	$ cd ~/opencv3/build
	$ sudo make install

23. Modified CMakeLists.txt
	
	Modified: "find_package(OpenCV REQUIRED)" to "find_package(OpenCV 3 REQUIRED)"
	Modified: "target_link_libraries blah blah blah" to target_link_libraries(ocams_1cgn ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${OpenCV_LIBS} -lv4l2 -ludev -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgcodecs -lopencv_calib3d -lopencv_features2d -lopencv_video -lopencv_videoio -pthread)

	Run it:
        $ source devel/setup.bash
        $ roslaunch ocams_1cgn ocams_ros.launch

24. It's time to put this adventure of trying to use the oCamS to rest. It doesn't fully support Ubuntu 18.04 and OpenCV 4. There's no point in continuing to waste time trying to make it work.

25. Switch from the oCamS to the Stereolabs ZED Mini


