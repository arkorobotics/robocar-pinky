#!/usr/bin/env python
PACKAGE = "ocams_1cgn"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

cam_ctrl = gen.add_group("Camera Control")
cam_ctrl.add("exposure",      int_t,  0, "Exposure parameter", 100, 1, 625)
cam_ctrl.add("gain",          int_t,  0, "Gain parameter", 32, 0, 255)
cam_ctrl.add("wb_blue",       int_t,  0, "Whitebalance Blue parameter", 200, 0, 250)
cam_ctrl.add("wb_red",        int_t,  0, "Whitebalance Red parameter", 150, 0, 250)
cam_ctrl.add("auto_exposure", bool_t, 0, "Auto-Exposure parameter", True)

stereo = gen.add_group("StereoMatcher")
# Stereo-matching algorithm type
stereo_algo_enum = gen.enum([gen.const("StereoBM", int_t, 0, "Block Matching"),
                                gen.const("StereoSGBM", int_t, 1, "SemiGlobal Block Matching"),
                                gen.const("StereoSGBM_HH", int_t, 2, "SemiGlobal Block Matching(fullDP)"),
                                gen.const("StereoSGBM_3WAY", int_t, 3, "SemiGlobal Block Matching(MODE_SGBM_3WAY)"),
                                gen.const("StereoSGBM_HH4", int_t, 4, "SemiGlobal Block Matching(MODE_HH4)"), ],
                               "stereo algorithm")
stereo.add("stereo_algorithm", int_t, 0, "sterel algorithm", 0, 0, 4, edit_method = stereo_algo_enum)

# disparity block matching pre-filtering type
prefilter_enum = gen.enum([gen.const("Normalize", int_t, 0, "PREFILTER_NORMALIZED_RESPONSE"),
                               gen.const("Sobel", int_t, 1, "PREFILTER_XSOBEL")],
                               "pre-filtering type")
stereo.add("prefilter_type", int_t, 0, "Pre-filtering type(BM only)", 0, 0, 1, edit_method = prefilter_enum) #bm only

# disparity block matching pre-filtering parameters
stereo.add("prefilter_size", int_t, 0, "Normalization window size, pixels(BM only)", 9, 5, 255) #bm only
stereo.add("prefilter_cap",  int_t, 0, "Bound on normalized pixel values", 31, 1, 63) #common

# disparity block matching correlation parameters
stereo.add("correlation_window_size", int_t, 0, "SAD correlation window width, pixels", 15, 1, 255) #common
stereo.add("min_disparity",           int_t, 0, "Disparity to begin search at, pixels (may be negative)", 0, -128, 128) #common
stereo.add("disparity_range",         int_t, 0, "Number of disparities to search, pixels", 125, 32, 256) #common
# TODO What about trySmallerWindows?

# disparity block matching post-filtering parameters
# NOTE: Making uniqueness_ratio int_t instead of double_t to work around dynamic_reconfigure gui issue
stereo.add("texture_threshold", int_t,    0, "Filter out if SAD window response does not exceed texture threshold(BM only)", 10, 0, 10000) #bm only
stereo.add("uniqueness_ratio",  int_t,    0, "Filter out if best match does not sufficiently exceed the next-best match", 15, 0, 100) #common
stereo.add("speckle_range",     int_t,    0, "Max allowed difference between detected disparities", 4, 0, 31) #common
stereo.add("speckle_size",      int_t,    0, "Reject regions smaller than this size, pixels", 100, 0, 1000) #common
stereo.add("disp12MaxDiff",     int_t,    0, "Maximum allowed difference (in integer pixel units) in the left-right disparity check", 0, -1, 128) #common
stereo.add("P1", int_t, 0, "The first parameter controlling the disparity smoothness, only available in SGBM", 200, 0, 4000)
stereo.add("P2", int_t, 0, "The second parameter controlling the disparity smoothness., only available in SGBM", 400, 0, 4000)
# First string value is node name, used only for generating documentation

exit(gen.generate(PACKAGE, "ocams_1cgn", "cam"))

